#!/bin/bash

set -euo pipefail

## LOGGING #####################################################################

RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

function _info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

function _error() {
    echo -e "${RED}ERROR:${NC} $1" >&2
}

function _warn() {
    echo -e "${YELLOW}WARNING:${NC} $1" >&2
}

function _fatal() {
    _error "$1"; exit 1;
}

function _not_implemented() {
    echo -e "${RED}NOT IMPLEMENTED:${NC} $1" >&2
    exit 2
}

function main() {
    _not_implemented "Main is not implemented."
}

function _mark_this_PR_as_forward_port_missing() {
    # Check if we're running in a GitHub Actions environment
    if [[ -n "${GITHUB_ACTIONS:-}" ]]; then
        # Extract PR number from GITHUB_REF_NAME: everything before first slash
        local pr_number=${GITHUB_REF_NAME%%/*}
        [[ -n "$pr_number" ]] || \
            _fatal "Could not determine the PR number from GITHUB_REF_NAME '$GITHUB_REF_NAME'."
        _info "Marking PR #$pr_number as missing forward porting."
        gh pr edit "$pr_number" --add-label "forward port missing" || \
            _fatal "Failed to mark PR #$pr_number as missing forward porting. Please check the GitHub CLI configuration."
    else
        # If not in GitHub Actions, just print a message
        _info "This PR is missing forward porting. Please check the forward porting section."
    fi
    return 0
}

## ENTRY POINT #################################################################

# Check if the script is being run directly or sourced
# If sourced, do not execute main (we source this script in tests)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi