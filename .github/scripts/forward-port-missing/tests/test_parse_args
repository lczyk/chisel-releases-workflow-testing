#!/bin/bash

source _common.sh

function parse_args_helper() {
    # Call parse_args and echo the results
    local check_repo
    local check_prs
    local log_level
    local -A versions
    local -A packages
    local repo
    parse_args check_repo check_prs log_level versions packages repo "$@" || assert false
    # Sort the associative arrays for consistent output
    local versions_str="$(printf '%s\n' "${!versions[@]}" | sort -u | paste -sd ' ' -)"
    local packages_str="$(printf '%s\n' "${!packages[@]}" | sort -u | paste -sd ' ' -)"
    echo "$check_repo $check_prs $versions_str $packages_str $repo"
}

function test_parse_args_basic() {
    parse_args_helper --help 2>&1 | assert_stdout_contains "Usage: forward-port-missing [OPTIONS] <repo>"
    parse_args_helper --version 2>&1 | assert_stdout_contains "forward-port-missing $VERSION"
}

function test_parse_args_options() {
    # No options provided, should default to true for check_repo and false for check_prs
    assert_equals \
        "true false * * my-repo" \
        "$(parse_args_helper "my-repo")"

    # Check with --check-repo and --check-prs options
    assert_equals \
        "false true * * my-repo" \
        "$(parse_args_helper --check-repo false --check-prs true "my-repo")"

    # Set the options to the same as defaults
    assert_equals \
        "true false * * my-repo" \
        "$(parse_args_helper --check-repo true --check-prs false "my-repo")"

    # Swap order of options should not matter
    assert_equals \
        "false true * * my-repo" \
        "$(parse_args_helper --check-prs true --check-repo false "my-repo")"

    # Change repo name
    assert_equals \
        "true false * * another-repo" \
        "$(parse_args_helper "another-repo")"

    # Options *after* repo name
    assert_equals \
        "$(parse_args_helper "my-repo" --check-repo false --check-prs true)" \
        "false true * * my-repo"
}

function test_parse_args_versions_and_packages() {
    # Versions and packages
    assert_equals \
        "true false 1.0 2.0 1 2 my-repo" \
        "$(parse_args_helper --versions 1.0,2.0 --packages 1,2 "my-repo")"
    
    # Versions and packages
    assert_equals \
        "true false 1.0 2.0 1 2 my-repo" \
        "$(parse_args_helper --versions "1.0,2.0" --packages "1,2" "my-repo")"
}


function test_parse_args_invalid() {
    # Invalid version format
    parse_args_helper --versions hello my-repo \
        2>&1 | assert_stdout_contains \
        "Invalid version format: 'hello'. Expected format is 'XX.XX'."
    
    # Invalid package format
    parse_args_helper --packages hello_bins my-repo \
        2>&1 | assert_stdout_contains \
        "Invalid package name: 'hello_bins'. Package names cannot contain underscores."

    # # Missing repo argument
    parse_args_helper \
        2>&1 | assert_stdout_contains \
        "Repository argument <repo> is required."
}