#!/bin/bash

source _common.sh

function test_find_issue_numbers() {
    local text="Fixes #123, #456 and #789"
    local expected="123 456 789"
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Issue numbers should be extracted correctly"
}

function test_find_issue_numbers_empty() {
    local text=""
    local expected=""
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Empty text should return empty string"
}

function test_find_issue_numbers_no_matches() {
    local text="No issues here"
    local expected=""
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Text with no issue numbers should return empty string"
}

function test_find_issue_lookalikes() {
    local text=$'Fixes #123, #456 and #789,\nbut not #XYZ or #1A or ##markdown_titles'
    local expected="123 456 789"
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should not match lookalike issue numbers"
}

function test_find_issue_numbers_hard_case() {
    # NOTE: The last case below is actually a bit tricky since the issue number is *the last*
    # in the text, so there is no character after it.
    local text="Fixes #1, #22 and #333 but not #1A but yes, #444; (#555) #666"
    local expected="1 22 333 444 555 666"
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should handle complex cases with punctuation and parentheses"
}

function test_find_issue_numbers_sort_and_unique() {
    local text="Fixes #3, #1, #2, #2, #3"
    local expected="1 2 3"
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should return sorted and unique issue numbers"
}

function test_find_issue_numbers_links() {
    local text=$(printf "%s\n" \
        "Find forward-port [here](https://${_DEFAULT_PR_BASE}/123)" \
        "and, with http as opposed to https [here](http://${_DEFAULT_PR_BASE}/456)" \
        "and even without any protocol [here](${_DEFAULT_PR_BASE}/789)." \
    )

    local expected="123 456 789"
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should extract issue numbers from links"
}

function test_find_issue_numbers_links_wrong_repo() {
    local text="Find forward-port [here](http://honey.badger.com/canonical/chisel-releases/pull/123)"
    local expected=""
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should not extract issue numbers from links to wrong repo"
}

function test_find_issue_numbers_short() {
    # This test used to not pass due to how one of the regexes was written.
    local text='#1'
    local expected="1"
    
    local result=$(find_issue_numbers "$text")
    assert_equals "$expected" "$result"  "Should handle single short issue number"
}