#!/bin/bash
# usage: cat results.json | ./apply_pr_labels.sh --dry-run/-n

dry_run=false
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--dry-run)
            dry_run=true
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
    shift
done

_maybe_dry_run() {
    if [ "$dry_run" = true ]; then
        # squash multiple spaces into one
        echo "> $(echo "$1" | tr -s ' ')"
    else
        eval "$1"
    fi
}

function main() {
    if [ "$dry_run" = false ]; then
        test -z "$GITHUB_TOKEN" && { echo "GITHUB_TOKEN is not set. Aborting."; exit 1; }
        command -v gh >/dev/null 2>&1 || { echo >&2 "gh is required but it's not installed. Aborting."; exit 1; }
    fi
    command -v jq >/dev/null 2>&1 || { echo >&2 "jq is required but it's not installed. Aborting."; exit 1; }

    jq -c '.[]' | while read -r pr; do
        number=$(echo "$pr" | jq -r '.number')
        title=$(echo "$pr" | jq -r '.title')
        url=$(echo "$pr" | jq -r '.url')
        base=$(echo "$pr" | jq -r '.base')
        head=$(echo "$pr" | jq -r '.head')
        forward_ported=$(echo "$pr" | jq -r '.forward_ported')
        label=$(echo "$pr" | jq -r '.label')

        echo "PR #$number: $title"
        echo "  $head -> $base"
        echo "  $url"
        # echo "  forward_ported: $forward_ported"
        # echo "  has label: $label"

        if [ "$forward_ported" = false ] && [ "$label" = false ]; then
            echo "  Adding the 'forward port missing' label."
            _maybe_dry_run "gh pr edit $number --add-label \"forward port missing\""
        elif [ "$forward_ported" = true ] && [ "$label" = true ]; then
            echo "  Removing the 'forward port missing' label."
            _maybe_dry_run "gh pr edit $number --remove-label \"forward port missing\""
        else
            echo "  No label changes needed."
        fi

        # update the comment with the status
        local msg_file="${msg_file:-$(mktemp)}"
        local header="<!-- Forward Port Status Comment DO NOT EDIT -->"
        echo "$header" > "$msg_file"
        echo "Forward Port Status:" >> "$msg_file"
        if [ "$forward_ported" = true ]; then
            echo "✅ This PR has been forward ported." >> "$msg_file"
        else
            echo "❌ This PR is missing a forward port." >> "$msg_file"
        fi
        THIS_REPO_URL=$(gh repo view --json url --jq '.url')
        echo -e "\n*This comment was generated by the [forward-port-missing]($THIS_REPO_URL/.github/scripts/forward-port-missing) script.*" >> "$msg_file"

        cat "$msg_file"

        # find existing comment by looking for the unique header
        local jq=".comments[] | select(.author.login == \"github-actions\") | select(.body | test(\"$header\"))"
        existing_comment=$(
            gh pr view "$number" \
            --json comments \
            --jq "$jq" || echo ""
        )
        echo $existing_comment | jq .
        if [ -n "$existing_comment" ]; then
            local existing_comment_id=$(echo "$existing_comment" | jq -r '.id')
            echo "  Updating existing comment (ID: $existing_comment_id)."
            # # GitHub CLI api
            # # https://cli.github.com/manual/gh_api

            # gh api \
            # --method PATCH \
            # -H "Accept: application/vnd.github+json" \
            # -H "X-GitHub-Api-Version: 2022-11-28" \
            # /repos/OWNER/REPO/issues/comments/COMMENT_ID \
            # -f 'body=Me too'
            local url="https://api.github.com/repos/$(gh repo view --json nameWithOwner --jq .nameWithOwner)/issues/comments/$existing_comment_id"
            echo "    URL: $url"
            _maybe_dry_run "gh api \
                --method PATCH \
                -H \"Accept: application/vnd.github+json\" \
                -H \"X-GitHub-Api-Version: 2022-11-28\" \
                $url \
                -f 'body=$(cat "$msg_file" | sed "s/'/\"/g")'"
        else
            echo "  Creating new comment."
            _maybe_dry_run "gh pr comment $number --body-file '$msg_file'"
        fi
    done
}


main