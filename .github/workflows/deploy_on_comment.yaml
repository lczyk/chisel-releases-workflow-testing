name: "Deploy on Comment"

# on:
#   issue_comment:
#     types: [created, edited]
#   pull_request:
#     # types: [opened, edited]
#   pull_request_target:
#     # types: [opened, edited]

on: 
  branch_protection_rule:
  check_run:
  check_suite:
  create:
  delete:
  deployment:
  deployment_status:
  discussion:
  discussion_comment:
  fork:
  gollum:
  issue_comment:
  issues:
  label:
  merge_group:
  milestone:
  page_build:
  public:
  pull_request:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - opened
      - edited
      - closed
      - reopened
      - synchronize
      - converted_to_draft
      - locked
      - unlocked
      - enqueued
      - dequeued
      - milestoned
      - demilestoned
      - ready_for_review
      - review_requested
      - review_request_removed
      - auto_merge_enabled
      - auto_merge_disabled
  pull_request_review:
  pull_request_review_comment:
  pull_request_target:
  push:
  registry_package:
  release:
  repository_dispatch:
  status:
  watch:
  workflow_call:
  workflow_dispatch:
    

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Echo event name
        run: echo "${{ github.event_name }}"

      - name: Echo all the event data
        run: echo '${{ toJson(github) }}'

  deploy:
    runs-on: ubuntu-latest
    # Check that we are a PR event and that the comment has the special marker
    # We want to check that in the `if` condition so we don't even launch the 
    # job and not waste resources.
    if: |
      (github.event_name == 'issue_comment' || 
       github.event_name == 'pull_request') &&
       contains(github.event.comment.body, '<!-- ðŸ¤– PR -->')
    steps:
      - name: Echo body
        run: echo "${{ github.event.comment.body }}"
          
      # - name: Generate an output variable
      #   id: set_variable  # Give this step a unique ID
      #   run: |
      #     # Generate a value (e.g., a dynamic version number)
      #     my_version="1.2.3"
      #     # Write the variable to the GITHUB_OUTPUT file
      #     echo "version=$my_version" >> $GITHUB_OUTPUT

      # - name: Use the variable in a later step
      #   run: |
      #     echo "The generated version is ${{ steps.set_variable.outputs.version }}"

