name: "Deploy on Comment"

on:
  issue_comment:
    types: [created, edited]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Check that we are a PR event and that the comment has the special marker
    # We want to check that in the `if` condition so we don't even launch the 
    # job and not waste resources.
    if: |
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '<!-- ðŸ¤– PR -->')
    steps:
      # This is a javascript step since it handles emoji better
      - name: Remove emoji from body
        uses: actions/github-script@v6
        id: body-cleanup
        with:
          script: |
            // console.log(github);
            // console.log(github.event);
            // console.log(github.event.comment);
            // console.log(github.event.comment.body);

            const body = ${github.event.comment.body};

            console.log(`Original body: ${body}`);


            // Regular expression to match all emojis.
            // The `u` flag enables Unicode-aware matching.
            const emojiRegex = /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{2300}-\u{23FF}\u{2B50}\u{2B00}\u{2900}\u{303D}\u{A900}\u{AE00}\u{3297}\u{3299}\u{2100}-\u{214F}\u{2300}-\u{23FF}\u{2500}-\u{25FF}\u{203C}\u{2049}]/gu;

            const cleanBody = body.replace(emojiRegex, '');

            // Log the result for debugging
            core.info(`Original Body: ${body}`);
            core.info(`Cleaned Body: ${cleanBody}`);

            // Set the cleaned body as a step output
            core.setOutput('value', cleanBody);
      
      - name: Echo cleaned body
        run: echo "${{ steps.body-cleanup.outputs.cleaned_body }}"
          
      - name: Generate an output variable
        id: set_variable  # Give this step a unique ID
        run: |
          # Generate a value (e.g., a dynamic version number)
          my_version="1.2.3"
          # Write the variable to the GITHUB_OUTPUT file
          echo "version=$my_version" >> $GITHUB_OUTPUT

      - name: Use the variable in a later step
        run: |
          echo "The generated version is ${{ steps.set_variable.outputs.version }}"
